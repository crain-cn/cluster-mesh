/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/crain-cn/cluster-mesh/api/cloud.mesh/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterMeshLister helps list ClusterMeshes.
// All objects returned here must be treated as read-only.
type ClusterMeshLister interface {
	// List lists all ClusterMeshes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ClusterMesh, err error)
	// ClusterMeshes returns an object that can list and get ClusterMeshes.
	ClusterMeshes(namespace string) ClusterMeshNamespaceLister
	ClusterMeshListerExpansion
}

// clusterMeshLister implements the ClusterMeshLister interface.
type clusterMeshLister struct {
	indexer cache.Indexer
}

// NewClusterMeshLister returns a new ClusterMeshLister.
func NewClusterMeshLister(indexer cache.Indexer) ClusterMeshLister {
	return &clusterMeshLister{indexer: indexer}
}

// List lists all ClusterMeshes in the indexer.
func (s *clusterMeshLister) List(selector labels.Selector) (ret []*v1beta1.ClusterMesh, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterMesh))
	})
	return ret, err
}

// ClusterMeshes returns an object that can list and get ClusterMeshes.
func (s *clusterMeshLister) ClusterMeshes(namespace string) ClusterMeshNamespaceLister {
	return clusterMeshNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterMeshNamespaceLister helps list and get ClusterMeshes.
// All objects returned here must be treated as read-only.
type ClusterMeshNamespaceLister interface {
	// List lists all ClusterMeshes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ClusterMesh, err error)
	// Get retrieves the ClusterMesh from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ClusterMesh, error)
	ClusterMeshNamespaceListerExpansion
}

// clusterMeshNamespaceLister implements the ClusterMeshNamespaceLister
// interface.
type clusterMeshNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterMeshes in the indexer for a given namespace.
func (s clusterMeshNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ClusterMesh, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterMesh))
	})
	return ret, err
}

// Get retrieves the ClusterMesh from the indexer for a given namespace and name.
func (s clusterMeshNamespaceLister) Get(name string) (*v1beta1.ClusterMesh, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("clustermesh"), name)
	}
	return obj.(*v1beta1.ClusterMesh), nil
}
